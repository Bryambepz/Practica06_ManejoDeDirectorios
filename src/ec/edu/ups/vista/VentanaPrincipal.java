/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.ups.vista;

import ec.edu.ups.controladorDirectorio.ControladorDirectorio;
import java.io.File;
import java.io.IOException;
//import java.awt.PopupMenu;
//import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author braya
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private ControladorDirectorio ctrlDirectorio;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        ctrlDirectorio = new ControladorDirectorio(txtRuta.getText());

    }

    private void mostrarLista(List<String> rutaL) {
        DefaultListModel modelo = new DefaultListModel();
        modelo.clear();
        for (String directorios : rutaL) {
            modelo.addElement(directorios);
        }
        jListDirectorios.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        txtRuta = new javax.swing.JTextField();
        btnListarDi = new javax.swing.JButton();
        btnListarArchivosOcultos = new javax.swing.JButton();
        btnListarDirecOculto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListDirectorios = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaInfo = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnInf = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuItemCrear = new javax.swing.JMenuItem();
        menuItemEliminar = new javax.swing.JMenuItem();
        menuItemRenombrar = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de Directorios");

        desktopPane.setName(""); // NOI18N

        txtRuta.setBackground(new java.awt.Color(23, 76, 129));
        txtRuta.setText("D:/");
        desktopPane.add(txtRuta);
        txtRuta.setBounds(330, 60, 230, 24);

        btnListarDi.setBackground(new java.awt.Color(21, 61, 87));
        btnListarDi.setText("Listar Directorios");
        btnListarDi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDiActionPerformed(evt);
            }
        });
        desktopPane.add(btnListarDi);
        btnListarDi.setBounds(190, 130, 129, 32);

        btnListarArchivosOcultos.setBackground(new java.awt.Color(21, 61, 87));
        btnListarArchivosOcultos.setText("Listar Archivos Ocultos");
        btnListarArchivosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosOcultosActionPerformed(evt);
            }
        });
        desktopPane.add(btnListarArchivosOcultos);
        btnListarArchivosOcultos.setBounds(360, 130, 163, 32);

        btnListarDirecOculto.setBackground(new java.awt.Color(21, 61, 87));
        btnListarDirecOculto.setText("Listar Directorios Ocultos");
        btnListarDirecOculto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirecOcultoActionPerformed(evt);
            }
        });
        desktopPane.add(btnListarDirecOculto);
        btnListarDirecOculto.setBounds(560, 130, 180, 32);

        jListDirectorios.setBackground(new java.awt.Color(0, 153, 153));
        jListDirectorios.setAutoscrolls(false);
        jScrollPane1.setViewportView(jListDirectorios);

        desktopPane.add(jScrollPane1);
        jScrollPane1.setBounds(30, 200, 380, 360);

        txtAreaInfo.setEditable(false);
        txtAreaInfo.setBackground(new java.awt.Color(0, 153, 153));
        txtAreaInfo.setColumns(20);
        txtAreaInfo.setRows(5);
        jScrollPane3.setViewportView(txtAreaInfo);

        desktopPane.add(jScrollPane3);
        jScrollPane3.setBounds(440, 270, 340, 150);

        jLabel1.setText("Ingrese ruta");
        desktopPane.add(jLabel1);
        jLabel1.setBounds(230, 60, 90, 16);

        btnInf.setBackground(new java.awt.Color(21, 61, 87));
        btnInf.setText("Mostrar Informacion");
        btnInf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfActionPerformed(evt);
            }
        });
        desktopPane.add(btnInf);
        btnInf.setBounds(120, 570, 180, 32);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Gestionar Directorios");

        menuItemCrear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemCrear.setMnemonic('o');
        menuItemCrear.setText("Crear");
        menuItemCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCrearActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemCrear);

        menuItemEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuItemEliminar.setMnemonic('a');
        menuItemEliminar.setText("Eliminar");
        menuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEliminarActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemEliminar);

        menuItemRenombrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuItemRenombrar.setMnemonic('s');
        menuItemRenombrar.setText("Renombrar");
        menuItemRenombrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRenombrarActionPerformed(evt);
            }
        });
        fileMenu.add(menuItemRenombrar);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Salir");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void menuItemCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCrearActionPerformed
        // TODO add your handling code here:
        String crearDirectorio = "";
        crearDirectorio = JOptionPane.showInputDialog("Ingrese nombre de directorio a crear");
        //System.out.println(crearDirectorio);
        String ruta = txtRuta.getText();

        if (crearDirectorio != null && ruta != null) {
            JOptionPane.showMessageDialog(this, "Se ha creado satisfactoriamente el directorio");
            try {
                ctrlDirectorio.crearDirectorio(crearDirectorio, ruta);
                limpiarLista();
                List<String> lista = ctrlDirectorio.listarDirectorios(ruta);
                mostrarLista(lista);
            } catch (IOException ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (crearDirectorio == null) {
            JOptionPane.showMessageDialog(this, "No se puede crear ningun directorio no se ha ingresado nada");
        } else if (ruta.equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese una ruta para crear un nuevo directorio");
        }
    }//GEN-LAST:event_menuItemCrearActionPerformed

    private void btnListarDiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDiActionPerformed
        // TODO add your handling code here:
        limpiarLista();
        String ruta = txtRuta.getText();

        if (ruta.equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese una ruta");
        } else {
            if (comprobar(ruta)) {
                List<String> lista = ctrlDirectorio.listarDirectorios(ruta);
                if (lista == null) {
                    JOptionPane.showMessageDialog(this, "No existe esta ruta");
                } else {
                    if (ruta.equals("")) {
                        JOptionPane.showMessageDialog(this, "Ingrese una ruta");
                    } else {
                        //ctrlDirectorio.listarDirectorios(txtRuta.getText());
                        List<String> listaD = ctrlDirectorio.listarDirectorios(ruta);
                        mostrarLista(listaD);
                        //listaDirectorios();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No existe ese directorio");
            }
        }
    }//GEN-LAST:event_btnListarDiActionPerformed

    private void btnListarArchivosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosOcultosActionPerformed
        // TODO add your handling code here:
        limpiarLista();
        String ruta = txtRuta.getText();

        if (ruta.equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese una ruta");
        } else {
            if (comprobar(ruta)) {
                List<String> lista = ctrlDirectorio.listarArchivosOcultos(ruta);
                if (lista == null) {
                    JOptionPane.showMessageDialog(this, "No existe esta ruta");
                } else {
                    if (ruta.equals("")) {
                        JOptionPane.showMessageDialog(this, "Ingrese una ruta");
                    } else {
                        List<String> listaDO = ctrlDirectorio.listarArchivosOcultos(ruta);
                        limpiarLista();
                        mostrarLista(listaDO);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No existe ese directorio");
            }
        }
    }//GEN-LAST:event_btnListarArchivosOcultosActionPerformed

    private void btnListarDirecOcultoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirecOcultoActionPerformed
        // TODO add your handling code here:

        limpiarLista();
        String ruta = txtRuta.getText();

        if (ruta.equals("")) {
            JOptionPane.showMessageDialog(this, "Ingrese una ruta");
        } else {
            if (comprobar(ruta)) {
                List<String> lista = ctrlDirectorio.listarDirectoriosOcultos(ruta);
                if (lista == null) {
                    JOptionPane.showMessageDialog(this, "No existe esta ruta");
                } else {
                    if (ruta.equals("")) {
                        JOptionPane.showMessageDialog(this, "Ingrese una ruta");
                    } else {
                        List<String> listaDO = ctrlDirectorio.listarDirectoriosOcultos(ruta);
                        limpiarLista();
                        mostrarLista(listaDO);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No existe ese directorio");
            }
        }
    }//GEN-LAST:event_btnListarDirecOcultoActionPerformed

    private void btnInfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfActionPerformed
        // TODO add your handling code here:

        String Directorio = jListDirectorios.getSelectedValue();
        if (Directorio == null) {
            JOptionPane.showMessageDialog(this, "Seleccione un archivo");
            limpiarLista();
            List<String> lista = ctrlDirectorio.listarDirectorios(txtRuta.getText());
            mostrarLista(lista);
        } else {
            txtAreaInfo.setText(ctrlDirectorio.mostrarInformacion(Directorio, txtRuta.getText()));
        }

    }//GEN-LAST:event_btnInfActionPerformed

    private void menuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEliminarActionPerformed
        // TODO add your handling code here:
        String eliminarDirectorio = "";
        eliminarDirectorio = JOptionPane.showInputDialog("Ingrese nombre de archivo a eliminar");
        if (eliminarDirectorio == null) {
            JOptionPane.showMessageDialog(this, "No se ha eliminado ningun archivo");
        } else {
            String rutaEliminara = txtRuta.getText() + File.separator + eliminarDirectorio;
            if (comprobar(rutaEliminara)) {
                ctrlDirectorio.eliminarDirectorio(eliminarDirectorio, txtRuta.getText());
                int confirmacion = JOptionPane.showConfirmDialog(this, "Seguro de eliminar este archivo");
                if (confirmacion == JOptionPane.YES_OPTION) {
                    JOptionPane.showMessageDialog(this, "Archivo eliminado exitosamente");
                    limpiarLista();
                    List<String> lista = ctrlDirectorio.listarDirectorios(txtRuta.getText());
                    mostrarLista(lista);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Este archivo no existe intente otra vez");
            }

        }

    }//GEN-LAST:event_menuItemEliminarActionPerformed

    private void menuItemRenombrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRenombrarActionPerformed
        // TODO add your handling code here:
        String actual = jListDirectorios.getSelectedValue();
        //System.out.println(actual );
        String nuevo = JOptionPane.showInputDialog("Ingrese nuevo nombre del archivo: " + actual);
        ctrlDirectorio.renombrar(actual, nuevo);
        limpiarLista();
        List<String> lista = ctrlDirectorio.listarDirectorios(txtRuta.getText());
        mostrarLista(lista);
    }//GEN-LAST:event_menuItemRenombrarActionPerformed

    public boolean comprobar(String ruta) {
        //String r = txtRuta.getText();
        File comprobacion = new File(ruta);
        if (comprobacion.exists()) {
            return true;
        } else {
            //
            return false;
        }
    }

    public void limpiarLista() {
        DefaultListModel model = new DefaultListModel();
        model.clear();
        jListDirectorios.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInf;
    private javax.swing.JButton btnListarArchivosOcultos;
    private javax.swing.JButton btnListarDi;
    private javax.swing.JButton btnListarDirecOculto;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListDirectorios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuItemCrear;
    private javax.swing.JMenuItem menuItemEliminar;
    private javax.swing.JMenuItem menuItemRenombrar;
    private javax.swing.JTextArea txtAreaInfo;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables

}
